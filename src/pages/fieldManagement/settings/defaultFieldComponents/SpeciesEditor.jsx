import React, { useState, useEffect, useRef } from 'react';
import { get, startCase } from 'lodash-es';
import { useIntl, FormattedMessage } from 'react-intl';

import DialogContent from '@material-ui/core/DialogContent';
import DialogActions from '@material-ui/core/DialogActions';
import TextField from '@material-ui/core/TextField';
import CustomAlert from '../../../../components/Alert';
import Button from '../../../../components/Button';
import Text from '../../../../components/Text';
import StandardDialog from '../../../../components/StandardDialog';
import SelectionEditor from '../../../../components/fields/edit/SelectionEditor';
import usePutSiteSetting from '../../../../models/site/usePutSiteSetting';

export default function SpeciesEditor(
  {
    onClose,
    siteSettings,
    codexIdEnabled
  }
) {
  console.log('codexIdEnabled', codexIdEnabled);
  const autogenerated_names = get(siteSettings, ['autogenerated_names', 'value'], {});  
  const currentSpecies = get(siteSettings, ['site.species', 'value'], []);
  const suggestedValues = get(
    siteSettings,
    ['site.species', 'suggestedValues'],
    [],
  );
  const usedSpecies = currentSpecies.map(species => species.itisTsn);
  const [ selectedSpecies, setSelectedSpecies ] = useState('');
  const [ newSpecies, setNewSpecies ] = useState(null);
  const [ prefixInput, setPrefixInput ] = useState('');
  const [ prefixValid, setPrefixValid ] = useState(false);
  const [result, setResult] = useState(null);
  const [isSelectionEditorValid, setIsSelectionEditorValid] = useState(false);
  const [ showSpeciesError, setShowSpeciesError ] = useState(false);
  const [ showPrefixError, setShowPrefixError ] = useState(false);
  const currentPrefixes = Object.values(autogenerated_names).map(item => item.prefix)
  const intl = useIntl(); 
  const species = get(siteSettings, ['site.species', 'suggestedValues'], []);
  const speciesOptions = species.map(s => {
    const mainCommonName = startCase(get(s, ['commonNames', 0]));
    const speciesLabel = mainCommonName
      ? `${mainCommonName} (${s.scientificName})`
      : s.scientificName;
    return {
      label: speciesLabel,
      value: s.itisTsn,
    };
  }).filter(s => !usedSpecies.includes(s.value));; 
  const [ transformedSpecies, setTransformedSpecies ] = useState([]);
  const {
    mutate: putSiteSetting,
    error,
    clearError,
    loading
  } = usePutSiteSetting();

  const checkPrefixValid = (prefix) => {
    const regex = /^[a-zA-Z0-9]+$/;
    const length = prefix.length;
    return regex.test(prefix) && length >= 3 && length <= 5 && !currentPrefixes.includes(prefix);
  } 
  
  useEffect(() => {
    setResult(
      [...transformedSpecies, {
        ...newSpecies,
        autogeneratedName: {
            prefix: prefixInput,
            type: "auto-species",
            enabled: codexIdEnabled
        }
    }],
    );
  }, [transformedSpecies, newSpecies, prefixInput])

  console.log('result', result);

  return (
    <StandardDialog open onClose = {onClose} titleId="ADD_SPECIES">
    <DialogContent style={{ minWidth: 200 }}>            
        <Text
            variant="caption"
            style={{ marginBottom: 12 }}
            id="ADD_SPECIES_DESCRIPTION"
          />        
        <div style={{display: 'flex', justifyContent: 'space-between', marginTop: 28}}>
          <SelectionEditor             
            schema={{
              labelId: 'SPECIES',
              choices: speciesOptions
            }}
            value={selectedSpecies}
            required
            onChange={(e) => {
              setSelectedSpecies(e);
              setNewSpecies(suggestedValues.find(s => s.itisTsn === e));
              setIsSelectionEditorValid(Boolean(e))
              setTransformedSpecies(currentSpecies.map(species => {
                const autogeneratedId = Object.keys(autogenerated_names)
                                              .find(id => autogenerated_names[id].reference_guid === species.id);         
              if (autogeneratedId) {
                  const autogeneratedInfo = autogenerated_names[autogeneratedId];
                  return {
                      ...species,
                      autogeneratedName: {
                          prefix: autogeneratedInfo.prefix,
                          guid: autogeneratedId,
                          type: autogeneratedInfo.type,
                          enabled: autogeneratedInfo.enabled
                      }
                  };
              } else {
                  return species;
              }
          }));
              }              
            }
          />          
          <TextField
            value={prefixInput}
            onChange={e => {
              setPrefixInput(e.target.value);                
              setPrefixValid(checkPrefixValid(e.target.value));}
            }
            label={intl.formatMessage({ id: 'ID_PREFIX' })}
            variant="outlined"          
            style={{ width: 200, marginTop: 12, marginBottom: 12 }}
          />      
        </div>       

      {showPrefixError && (
        <CustomAlert
          style={{ marginTop: 12 }}
          severity="error"
          titleId="PREFIX_INVALID"
        />
      )}
      {showSpeciesError && (
        <CustomAlert
        style={{ marginTop: 12 }}
        severity="error"
        titleId="SPECIES_ERROR"
      />
      )}
      {error && (
        <CustomAlert
        style={{ marginTop: 12 }}
        severity="error">
          {error}
        </CustomAlert>      
      )}
      
    </DialogContent>
    <DialogActions style={{ padding: '0px 24px 24px 24px' }}>
      <Button 
        display="primary"
        loading={loading}
        onClick={async () =>
          {            
            setShowPrefixError(!prefixValid);
            setShowSpeciesError(!isSelectionEditorValid);
            if(isSelectionEditorValid && prefixValid && !error) {
              const response = await putSiteSetting({
                property: 'site.species',
                data: result,
                });
              if (response?.status === 200) {
                setSelectedSpecies('');
                clearError();
                onClose();     
              }
            }           
          }          
        }
        >
        <FormattedMessage id="FINISH" />
      </Button>
      <Button 
        display="primary"
        onClick={onClose} >
        <FormattedMessage id="CANCEL" />
      </Button>
    </DialogActions>
  </StandardDialog>
  );
}